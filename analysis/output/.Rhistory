#Bayesian models for focal distance and impact
setwd("~/Documents/GitHub/Wine-Grape-Disease/analysis/output/") # setwd("~/Documents/git/projects/misc/darwin/winegrapedisease/Wine-Grape-Disease/analysis/output")
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
library(tidyverse)
library(dbplyr)
library(tidyr)
library(reshape2)
library(data.table)
library(tibble)
library(dplyr)
library(rstanarm)
library(loo)
library(shinystan)
#loading in datasets
focaldistance_onespecies <- read_csv("Focaldistanceonespecies.csv")
focaldistance_enitregenus <- read_csv("Focaldistanceentiregenus.csv")
calvin <- stan_glm(impact~ SES.FPD, data = focaldistance_enitregenus,
family = gaussian(link="identity"),)
summary(calvin)
fits <- calvin %>%
as_data_frame %>%
rename(intercept = `(Intercept)`) %>%
select(-sigma)
#stimulating predictions
SES.FPD_SEQ <- seq(from = -10, to = 2, by = 2)
impact_SEQ <- seq(from = 0, to = 100, by = 14.3)
y_calvin <- posterior_predict(calvin, newdata = data.frame(impact = impact_SEQ, SES.FPD= SES.FPD_SEQ))
View(y_calvin)
View(y_calvin)
newdata = data.frame(impact = impact_SEQ, SES.FPD= SES.FPD_SEQ))
newdata = data.frame(impact = impact_SEQ, SES.FPD= SES.FPD_SEQ)
View(newdata)
y_calvin <- posterior_predict(calvin, newdata = data.frame(impact = impact_SEQ))
#stimulating predictions
impact_SEQ <- seq(from = 0, to = 100, by = 14.3)
y_calvin <- posterior_predict(calvin, newdata = data.frame(impact = impact_SEQ))
View(y_calvin)
posterior_predict(calvin)
View(y_calvin)
#stimulating predictions
SES.FPD_SEQ <- seq(from = -10, to = 2, by = 2)
impact_SEQ <- seq(from = 0, to = 100, by = 14.3)
y_calvin <- posterior_predict(calvin, newdata = data.frame(impact = impact_SEQ, SES.FPD= SES.FPD_SEQ))
#stimulating predictions
SES.FPD_SEQ <- seq(from = -10, to = 2, by = 2)
impact_SEQ <- seq(from = 0, to = 100, by = 14.3)
y_calvin <- posterior_predict(calvin, newdata = data.frame(impact = impact_SEQ, SES.FPD= SES.FPD_SEQ))
View(y_calvin)
#stimulating predictions
SES.FPD_SEQ <- seq(from = -10, to = 2, by = 2)
y_calvin <- posterior_predict(calvin, newdata = data.frame(SES.FPD= SES.FPD_SEQ))
View(y_calvin)
boxplot(y_calvin, axes = FALSE, outline = FALSE, ylim = c(-10,2),
xlab = "SES.MPD", ylab = "Predicted impact")
axis(1, at = 1:ncol(y_calvin), labels = SES.FPD_SEQ, las = 3)
axis(2, las = 1)
#stimulating predictions
SES.FPD_SEQ <- seq(from = -10, to = 2, by = 2)
impact_SEQ <- seq(from = 0, to = 100, by = 14.3)
y_calvin <- posterior_predict(calvin, newdata = data.frame(impact = impact_SEQ ,SES.FPD= SES.FPD_SEQ))
boxplot(y_calvin, axes = FALSE, outline = FALSE, ylim = c(0,100),
xlab = "SES.MPD", ylab = "Predicted impact")
axis(1, at = 1:ncol(y_calvin), labels = SES.FPD_SEQ, las = 3)
axis(2, las = 1)
####script to create light data for Ph.D.
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
setwd("~/Documents/GitHub/Coexistence-in-BC-Forests/Analyses/")
library(vegan)
library(tidyverse)
library(dbplyr)
library(tidyr)
library(reshape2)
library(data.table)
library(tibble)
library(dplyr)
library(ggplot2)
LiCordatafinal <- read_csv("input/LiCordatafinalpspsft.csv")
LiCordata_adult <- LiCordatafinal[LiCordatafinal$Species != 'AMBIENT',]
LiCordata_adult1 <- LiCordatafinal[LiCordatafinal$Species == 'AMBIENT',]
LiCordata_adult <- LiCordata_adult[,c(1:403,441,450)]
LiCordata_adult[, c(3:403)] <- sapply(LiCordata_adult[, c(3:403)], as.numeric)
LiCordata_adult1 <- LiCordata_adult1[,c(1:403,441,450)]
LiCordata_adult1[, c(3:403)] <- sapply(LiCordata_adult1[, c(3:403)], as.numeric)
LiCordata_adult <- LiCordata_adult[order(LiCordata_adult$Time),]
#makes rowsname species names
rownames(LiCordata_adult) <- make.names(LiCordata_adult$Species, unique = TRUE)
#repeats each ambient reading three times in a new dataset
LiCordata_adult1 <- LiCordata_adult1 %>% slice(rep(1:n(), each = 3))
path <- unique(names(LiCordata_adult[,(3:403)]))
k2 <- (matrix(NA, nrow= nrow(LiCordata_adult[,(3:403)]), ncol = ncol(LiCordata_adult[,(3:403)])))
colnames(k2) <- colnames(LiCordata_adult[,(3:403)])
row.names(k2) <- rownames(LiCordata_adult)
for (n in 1:length(path)){
k2[,n]<- as.matrix(LiCordata_adult[,(3:403)][,n] - LiCordata_adult1[,(3:403)][,n])
}
k2 <- as.data.frame(k2)
k2 <- rownames_to_column(k2)
k2<- melt(k2[,c(1:402)], id.vars = c("rowname"))
k2$species<-sub("^([[:alpha:]]*).*", "\\1", k2$rowname)
k2 <- k2[,-1]
k2$variable<- gsub("nm","", paste(k2$variable))
k2$variable <- as.numeric(k2$variable)
k3 <- k2 %>%
group_by(variable,species) %>%
summarise(avg = mean(value))
ggplot(data = k3, aes(variable,avg,color=species)) + geom_point()
# housekeeping
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
setwd("~/Documents/Ph.D/OSPREE/TRY_data/")
library(data.table)
library(tidyverse)
library(dplyr)
library(readr)
library(reshape2)
library(plyr)
library(janitor)
library(janitor)
files <- as.character(list.files(path="~/Documents/Ph.D/OSPREE/TRY_data/"))
readLines(paste("~/Documents/Ph.D/OSPREE/TRY_data/",.Platform$file.sep,files[1],sep=""))
# housekeeping
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
setwd("~/Documents/Ph.D/OSPREE/TRY_data/")
library(data.table)
library(tidyverse)
library(dplyr)
library(readr)
library(reshape2)
library(plyr)
files <- as.character(list.files(path="~/Documents/Ph.D/OSPREE/TRY_data/"))
readLines(paste("~/Documents/Ph.D/OSPREE/TRY_data/",.Platform$file.sep,files[1],sep=""))
myfiles = list.files(path="~/Documents/Ph.D/OSPREE/TRY_data/", pattern="*.csv", full.names=TRUE)
`7441` <- read.delim("~/Documents/Ph.D/OSPREE/TRY_Data/7441.txt")
View(`7441`)
data <- `7441` <- read.delim("~/Documents/Ph.D/OSPREE/TRY_Data/7441.txt")
data<-data[,1:25]
length(unique(data$Dataset))
names(7441)
colnames(7441)
View(`7441`)
View(data)
for (name in unique(data$Dataset)){
#Subset the data by dataset name
tmp <- subset(data,Dataset==name)
#Create a new filename for each data set - the folder 'Dataset_georef_longlat' should already exist
name2=gsub('/','', name)
fn=paste('TRY_data/', gsub(' ','',name2),'.csv',sep='')
#Save the CSV file containing only one data set
print(fn)
write.csv(tmp,fn, row.names=FALSE)
}
# housekeeping
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
setwd("~/Documents/Ph.D/OSPREE/TRY_data/")
library(data.table)
library(tidyverse)
library(dplyr)
library(readr)
library(reshape2)
library(plyr)
data <- `7441` <- read.delim("~/Documents/Ph.D/OSPREE/TRY_Data/7441.txt")
data<-data[,1:25]
length(unique(data$Dataset))
unique(data$Dataset)
length(unique(data$Dataset))
for (name in unique(data$Dataset)){
#Subset the data by dataset name
tmp <- subset(data,Dataset==name)
#Create a new filename for each data set - the folder 'Dataset_georef_longlat' should already exist
name2=gsub('/','', name)
fn=paste('TRY_data/', gsub(' ','',name2),'.csv',sep='')
#Save the CSV file containing only one data set
print(fn)
write.csv(tmp,fn, row.names=FALSE)
}
tmp <- subset(data,Dataset==name)
View(tmp)
View(tmp)
#Create a new filename for each data set - the folder 'Dataset_georef_longlat' should already exist
name2=gsub('/','', name)
fn=paste('TRY_data/', gsub(' ','',name2),'.csv',sep='')
#Save the CSV file containing only one data set
print(fn)
write.csv(tmp,fn, row.names=FALSE)
for (name in unique(data$Dataset)){
#Subset the data by dataset name
tmp <- subset(data,Dataset==name)
#Create a new filename for each data set - the folder 'Dataset_georef_longlat' should already exist
name2=gsub('/','', name)
fn=paste('TRY_Data/', gsub(' ','',name2),'.csv',sep='')
#Save the CSV file containing only one data set
print(fn)
write.csv(tmp,fn, row.names=FALSE)
}
setwd("~/Documents/Ph.D/OSPREE/TRY_data/")
data <-read.delim("7441.txt")
data<-data[,1:25]
length(unique(data$Dataset))
for (name in unique(data$Dataset)){
#Subset the data by dataset name
tmp <- subset(data,Dataset==name)
#Create a new filename for each data set - the folder 'Dataset_georef_longlat' should already exist
name2=gsub('/','', name)
fn=paste('sep_data/', gsub(' ','',name2),'.csv',sep='')
#Save the CSV file containing only one data set
print(fn)
write.csv(tmp,fn, row.names=FALSE)
}
myfiles = list.files(path="~/Documents/Ph.D/OSPREE/sep_data1/", pattern="*.csv", full.names=TRUE)
myfiles
dat_clean = ldply(myfiles, read_csv)
View(dat_clean)
Trydata <- dcast(dat_clean, LastName+FirstName+DatasetID+Dataset+SpeciesName+ObservationID+unique(ObsDataID)~DataName, value.var = "OrigValueStr", na.rm=TRUE)
myfiles = list.files(path="Sep_data1/", pattern="*.csv", full.names=TRUE)
myfiles
dat_clean = ldply(myfiles, read_csv)
Trydata <- dcast(dat_clean, LastName+FirstName+DatasetID+Dataset+SpeciesName+ObservationID+unique(ObsDataID)~DataName, value.var = "OrigValueStr", na.rm=TRUE)
View(Trydata)
names(Trydata)
#Bayesian models based on type of pathogen
setwd("~/Documents/GitHub/Wine-Grape-Disease/analysis/output/") # setwd("~/Documents/git/projects/misc/darwin/winegrapedisease/Wine-Grape-Disease/analysis/output")
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
library(tidyverse)
library(dbplyr)
library(tidyr)
library(reshape2)
library(data.table)
library(tibble)
library(dplyr)
library(rstanarm)
library(loo)
library(shinystan)
#loading in datasets
mpd_all_sp_in_genus <- read_csv("mpd_all_sp_in_genus.csv")
mpd_single_sp_in_genus <- read_csv("mpd.single.sp.in.genus.csv")
mntd_all_sp_in_genus <- read_csv("mntd_all_sp_in_genus.csv")
mntd_single_sp_in_genus <- read_csv("mntd.single.sp.in.genus.csv")
post1<- stan_glm(mpd.obs.z~ Type, data = mpd_all_sp_in_genus,
family = gaussian(link="identity"),)
summary(post1)
fits <- post1 %>%
as_data_frame %>%
rename(intercept = `(Intercept)`) %>%
select(-sigma)
path <- unique(names(fits))
coef(post1)
fits <- post1 %>%
as_data_frame %>%
rename(intercept = `(Intercept)`) %>%
select(-sigma)
rm(list=ls()) # remove everything currently held in the R memory
#Bayesian models based on type of pathogen
setwd("~/Documents/GitHub/Wine-Grape-Disease/analysis/output/") # setwd("~/Documents/git/projects/misc/darwin/winegrapedisease/Wine-Grape-Disease/analysis/output")
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
library(tidyverse)
library(dbplyr)
library(tidyr)
library(reshape2)
library(data.table)
library(tibble)
library(dplyr)
library(rstanarm)
library(loo)
library(shinystan)
#loading in datasets
mpd_all_sp_in_genus <- read_csv("mpd_all_sp_in_genus.csv")
mpd_single_sp_in_genus <- read_csv("mpd.single.sp.in.genus.csv")
mntd_all_sp_in_genus <- read_csv("mntd_all_sp_in_genus.csv")
mntd_single_sp_in_genus <- read_csv("mntd.single.sp.in.genus.csv")
post1<- stan_glm(mpd.obs.z~ Type, data = mpd_all_sp_in_genus,
family = gaussian(link="identity"),)
summary(post1)
fits <- post1 %>%
as_data_frame %>%
rename(intercept = `(Intercept)`) %>%
select(-sigma)
coef(post1)
fits <- post1 %>%
as_data_frame %>%
rename(intercept = "(Intercept)") %>%
select(-sigma)
?rename
library(dplyr)
fits <- post1 %>%
as_data_frame %>%
rename(intercept = "(Intercept)") %>%
select(-sigma)
names(post1)
names(coef(post1))
fits <- post1 %>%
as_data_frame %>%
rename(intercept = '(Intercept)') %>%
select(-sigma)
fits <- post1 %>%
as_data_frame %>%
rename('(Intercept)'= intercept ) %>%
select(-sigma)
fits <- post1 %>%
as_data_frame %>%
rename(intercept = (Intercept)) %>%
select(-sigma)
View(post1)
#Bayesian models based on type of pathogen
setwd("~/Documents/GitHub/Wine-Grape-Disease/analysis/output/") # setwd("~/Documents/git/projects/misc/darwin/winegrapedisease/Wine-Grape-Disease/analysis/output")
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
library(data.table)
library(tibble)
library(dplyr)
library(rstanarm)
library(loo)
library(tidyverse)
library(dbplyr)
library(tidyr)
#loading in datasets
mpd_all_sp_in_genus <- read_csv("mpd_all_sp_in_genus.csv")
mpd_single_sp_in_genus <- read_csv("mpd.single.sp.in.genus.csv")
mntd_all_sp_in_genus <- read_csv("mntd_all_sp_in_genus.csv")
mntd_single_sp_in_genus <- read_csv("mntd.single.sp.in.genus.csv")
post1<- stan_glm(mpd.obs.z~ Type, data = mpd_all_sp_in_genus,
family = gaussian(link="identity"),)
summary(post1)
coef(post1)
fits <- post1 %>%
as_data_frame %>%
rename(intercept = (Intercept)) %>%
select(-sigma)
#Bayesian models based on type of pathogen
setwd("~/Documents/GitHub/Wine-Grape-Disease/analysis/output/") # setwd("~/Documents/git/projects/misc/darwin/winegrapedisease/Wine-Grape-Disease/analysis/output")
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
library(tidyverse)
library(dbplyr)
library(tidyr)
library(data.table)
library(tibble)
library(dplyr)
library(rstanarm)
library(loo)
library(shinystan)
#loading in datasets
mpd_all_sp_in_genus <- read_csv("mpd_all_sp_in_genus.csv")
mpd_single_sp_in_genus <- read_csv("mpd.single.sp.in.genus.csv")
mntd_all_sp_in_genus <- read_csv("mntd_all_sp_in_genus.csv")
mntd_single_sp_in_genus <- read_csv("mntd.single.sp.in.genus.csv")
post1<- stan_glm(mpd.obs.z~ Type, data = mpd_all_sp_in_genus,
family = gaussian(link="identity"),)
summary(post1)
coef(post1)
fits <- post1 %>%
as_data_frame %>%
rename(intercept = (Intercept)) %>%
select(-sigma)
fits <- post1 %>%
as_data_frame %>%
rename(intercept = '(Intercept)') %>%
select(-sigma)
(Intercept)
fits <- post1
fits <- as.dataframe(post1)
fits <- as.data.frame(post1)
View(fits)
fits <- rename(fits,intercept = (Intercept))
fits <- rename(fits,intercept = '(Intercept)')
names(fits)
fits[1,]
fits[,1]
fits <- rename(fits,'(Intercept)'= intercept)
fits<- select(fits,-sigma)
View(fits)
fits <- as.data.frame(post1)
names(fits)[1] <- "intercept"
fits<- select(fits,-sigma)
View(fits)
path <- unique(names(fits))
dose <- (matrix(NA, nrow= nrow(fits), ncol = ncol(fits)))
for (n in 1:length(path)){
dose[,1]<- as.matrix(fits[,1] * 1)
dose[,n]<- as.matrix(fits[,1] + fits[,n])
}
dose <- as.data.frame(dose)
dose <- dose %>%
rename(
intercept = V1,
TypeF = V2,
TypeN = V3,
TypeP = V4,
TypeV = V5
)
