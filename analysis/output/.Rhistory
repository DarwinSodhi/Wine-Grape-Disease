Eutypalata$host_species <- unlist(lapply(breakbywhitespace, function(x) x[2]))
### removes : and replaces with blank space
Eutypalata$host_species <- as.character(gsub(":","",Eutypalata$host_species))
### adding colum with pathogen name
Eutypalata<- cbind(pathogen = "Eutypa_lata", Eutypalata)
### Creating final dataset for fungal pathogen with only the
Eutypalata <- subset(Eutypalata, select = c(1, 3, 4))
View(Eutypalata)
### Lasiodiplodiatheobromae load dataset to R
Lasiodiplodiatheobromae<- read.delim("~/Documents/Ph.D/Wine grape Disease/Fungal/Lasiodiplodiatheobromae.txt", header=FALSE)
breakbywhitespace <- strsplit(as.character(Lasiodiplodiatheobromae$V1), " ", fixed=TRUE)
### Now I break up the columb by white space and take the first and second objects...
Lasiodiplodiatheobromae$host_genus <- unlist(lapply(breakbywhitespace, function(x) x[1]))
Lasiodiplodiatheobromae$host_species <- unlist(lapply(breakbywhitespace, function(x) x[2]))
### removes : and replaces with blank space
Lasiodiplodiatheobromae$host_species <- as.character(gsub(":","",Lasiodiplodiatheobromae$host_species))
### adding colum with pathogen name
Lasiodiplodiatheobromae<- cbind(pathogen = "Lasiodiplodia_theobromae", Lasiodiplodiatheobromae)
### Creating final dataset for fungal pathogen with only the relevant information
Lasiodiplodiatheobromae <- subset(Lasiodiplodiatheobromae, select = c(1, 3, 4))
View(Lasiodiplodiatheobromae)
###Paratrichodorus_minor
Paratrichodorus_minor<- read.delim("~/Documents/Ph.D/Wine grape Disease/nematode/Paratrichodorus_minor.txt")
breakbywhitespace <- strsplit(as.character(Paratrichodorus_minor$PgenusPspec), " ", fixed=TRUE)
### Now I break up the columb by white space and take the first and second objects...
Paratrichodorus_minor$host_genus <- unlist(lapply(breakbywhitespace, function(x) x[1]))
Paratrichodorus_minor$host_species <- unlist(lapply(breakbywhitespace, function(x) x[2]))
### adding colum with pathogen name
Paratrichodorus_minor<- cbind(pathogen = "Paratrichodorus_minor", Paratrichodorus_minor)
View(Paratrichodorus_minor)
View(Paratrichodorus_minor)
### Creating final dataset for fungal pathogen with only the relevant information
Paratrichodorus_minor <- subset(Paratrichodorus_minor, select = c(1, 4, 5))
View(Paratrichodorus_minor)
###Tylenchorhynchus_clarus
Tylenchorhynchus_clarus<- read.delim("~/Documents/Ph.D/Wine grape Disease/nematode/Tylenchorhynchus_clarus.txt")
breakbywhitespace <- strsplit(as.character(Tylenchorhynchus_clarus$PgenusPspec), " ", fixed=TRUE)
breakbywhitespace <- strsplit(as.character(Tylenchorhynchus_clarus$PgenusPspec), " ", fixed=TRUE)
### Now I break up the columb by white space and take the first and second objects...
Tylenchorhynchus_clarus$host_genus <- unlist(lapply(breakbywhitespace, function(x) x[1]))
Tylenchorhynchus_clarus$host_species <- unlist(lapply(breakbywhitespace, function(x) x[2]))
### adding colum with pathogen name
Tylenchorhynchus_clarus<- cbind(pathogen = "Tylenchorhynchus_clarus", Tylenchorhynchus_clarus)
### Creating final dataset for fungal pathogen with only the relevant information
Tylenchorhynchus_clarus <- subset(Tylenchorhynchus_clarus, select = c(1, 4, 5))
View(Tylenchorhynchus_clarus)
###Xiphinema_americanum
Xiphinema_americanum<- read.delim("~/Documents/Ph.D/Wine grape Disease/nematode/Xiphinema_americanum.txt")
breakbywhitespace <- strsplit(as.character(Xiphinema_americanum$PgenusPspec), " ", fixed=TRUE)
###Xiphinema_americanum
Xiphinema_americanum<- read.delim("~/Documents/Ph.D/Wine grape Disease/nematode/Xiphinema_americanum.txt")
breakbywhitespace <- strsplit(as.character(Xiphinema_americanum$PgenusPspec), " ", fixed=TRUE)
### Now I break up the columb by white space and take the first and second objects...
Xiphinema_americanum$host_genus <- unlist(lapply(breakbywhitespace, function(x) x[1]))
Xiphinema_americanum$host_species <- unlist(lapply(breakbywhitespace, function(x) x[2]))
### adding colum with pathogen name
Xiphinema_americanum<- cbind(pathogen = "Xiphinema_americanum", Xiphinema_americanum)
### Creating final dataset for fungal pathogen with only the relevant information
Xiphinema_americanum <- subset(Xiphinema_americanum, select = c(1, 4, 5))
View(Xiphinema_americanum)
###Mesocriconema_xenoplax
Mesocriconema_xenoplax<- read.delim("~/Documents/Ph.D/Wine grape Disease/nematode/Mesocriconema_xenoplax.txt")
breakbywhitespace <- strsplit(as.character(Mesocriconema_xenoplax$PgenusPspec), " ", fixed=TRUE)
### Now I break up the columb by white space and take the first and second objects...
Mesocriconema_xenoplax$host_genus <- unlist(lapply(breakbywhitespace, function(x) x[1]))
Mesocriconema_xenoplax$host_species <- unlist(lapply(breakbywhitespace, function(x) x[2]))
### adding colum with pathogen name
Mesocriconema_xenoplax<- cbind(pathogen = "Mesocriconema_xenoplax", Mesocriconema_xenoplax)
### Creating final dataset for fungal pathogen with only the relevant information
Mesocriconema_xenoplax <- subset(Mesocriconema_xenoplax, select = c(1, 4, 5))
View(Mesocriconema_xenoplax)
View(Alternaria_alternata)
?rbind
?reduce
Reduce(function(x, y) merge(x, y, all=TRUE), list(Alternaria_alternata, Botrytiscinerea, Eutypalata, Lasiodiplodiatheobromae))
### merging all fungal datasets into one
Fungalhost<- Reduce(function(x, y) merge(x, y, all=TRUE), list(Alternaria_alternata, Botrytiscinerea, Eutypalata, Lasiodiplodiatheobromae))
View(Fungalhost)
### merging all nematode datasets into one
nematodehost<- Reduce(function(x, y) merge(x, y, all=TRUE), list(Paratrichodorus_minor, Tylenchorhynchus_clarus, Xiphinema_americanum, Mesocriconema_xenoplax))
View(nematodehost)
#Read in dataframes
host_spp<-read.csv("host_pathogen.csv", stringsAsFactors=F)
#Read in dataframes
host_spp<-read.csv("~/Documents/Ph.D/Wine grape Disease/host_pathogen.csv", stringsAsFactors=F)
agg_spp<-read.csv("agricultural_species.csv", stringsAsFactors=F)
agg_spp<-read.csv("~/Documents/Ph.D/Wine grape Disease/agricultural_species.csv", stringsAsFactors=F)
#get a list of the pathogens
path<-unique(host_spp$Pathogen)
#creat an empty variable to strore final results
agg_hosts<-NULL
#start a loop to extract host species list for each pathogen
for (i in 1:length(path)){
#subset the data for pathogen[i]
my_hosts<-subset(host_spp, Pathogen == path[i])
#format host names nicely
host_names<-paste(my_hosts$host_genus,"_",my_hosts$host_species, sep="")
#creat a temporary variable to store agricultural hosts
agg_list<-NULL
#start a loop to run through recorded hosts and macth them to agricultural species
for (n in 1:length(host_names)){
#if statement extracts all agricultural species in that genus if a species name is not given
#(assumes pathohen infects entire genus!)
if (my_hosts$host_species[n] == "sp."){
host.to.add<-subset(agg_spp, genus == my_hosts$host_genus[n])[,"Species_name"]
} else {
#if a species name is given - see if it matches to a species in the aggricultural crop list
host.to.add<-agg_spp$Species_name[agg_spp$Species_name %in% host_names[n]]
}#end if
#store crops species list for pathoigen[i] (first checking whether at elast one crop species was returned)
if (length(host.to.add)>0){
agg_list<-c(agg_list, host.to.add)
}
}#end for n
#save output in agg_hosts with a column for the pathogen and a column for the aggricultural host species
agg_hosts<-rbind(agg_hosts,(cbind(rep(path[i], length(agg_list)), agg_list)))
}#end for i
View(agg_hosts)
View(agg_hosts)
View(agg_spp)
str(Fungalhost)
str(nematodehost)
str(host_spp)
### merging all fungal datasets into one
Fungalhost<- Reduce(function(x, y) merge(x, y, all=TRUE), list(Alternaria_alternata, Botrytiscinerea, Eutypalata, Lasiodiplodiatheobromae))
### Alternaria_alternata load dataset to R
Alternaria_alternata<- read.delim("~/Documents/Ph.D/Wine grape Disease/Fungal/Alternaria alternata.txt", header=FALSE)
breakbywhitespace <- strsplit(as.character(Alternaria_alternata$V1), " ", fixed=TRUE)
### Now I break up the columb by white space and take the first and second objects...
Alternaria_alternata$host_genus <- unlist(lapply(breakbywhitespace, function(x) x[1]))
Alternaria_alternata$host_species <- unlist(lapply(breakbywhitespace, function(x) x[2]))
### removes : and replaces with blank space
Alternaria_alternata$host_species <- as.character(gsub(":","",Alternaria_alternata$host_species))
### adding colum with pathogen name
Alternaria_alternata<- cbind(Pathogen = "Alternaria_alternata", Alternaria_alternata)
### Creating final dataset for fungal pathogen with only the relevant information
Alternaria_alternata <- subset(Alternaria_alternata, select = c(1, 3, 4))
### Botrytiscinerea load dataset to R
Botrytiscinerea<- read.delim("~/Documents/Ph.D/Wine grape Disease/Fungal/Botrytiscinerea.txt", header=FALSE)
breakbywhitespace <- strsplit(as.character(Botrytiscinerea$V1), " ", fixed=TRUE)
### Now I break up the columb by white space and take the first and second objects...
Botrytiscinerea$host_genus <- unlist(lapply(breakbywhitespace, function(x) x[1]))
Botrytiscinerea$host_species <- unlist(lapply(breakbywhitespace, function(x) x[2]))
### removes : and replaces with blank space
Botrytiscinerea$host_species <- as.character(gsub(":","",Botrytiscinerea$host_species))
### adding colum with pathogen name
Botrytiscinerea<- cbind(Pathogen = "Botrytis_cinerea", Botrytiscinerea)
### Creating final dataset for fungal pathogen with only the relevant information
Botrytiscinerea <- subset(Botrytiscinerea, select = c(1, 3, 4))
### Eutypalata load dataset to R
Eutypalata<- read.delim("~/Documents/Ph.D/Wine grape Disease/Fungal/Eutypalata.txt", header=FALSE)
breakbywhitespace <- strsplit(as.character(Eutypalata$V1), " ", fixed=TRUE)
### Now I break up the columb by white space and take the first and second objects...
Eutypalata$host_genus <- unlist(lapply(breakbywhitespace, function(x) x[1]))
Eutypalata$host_species <- unlist(lapply(breakbywhitespace, function(x) x[2]))
### removes : and replaces with blank space
Eutypalata$host_species <- as.character(gsub(":","",Eutypalata$host_species))
### adding colum with pathogen name
Eutypalata<- cbind(Pathogen = "Eutypa_lata", Eutypalata)
### Creating final dataset for fungal pathogen with only the relevant information
Eutypalata <- subset(Eutypalata, select = c(1, 3, 4))
### Lasiodiplodiatheobromae load dataset to R
Lasiodiplodiatheobromae<- read.delim("~/Documents/Ph.D/Wine grape Disease/Fungal/Lasiodiplodiatheobromae.txt", header=FALSE)
breakbywhitespace <- strsplit(as.character(Lasiodiplodiatheobromae$V1), " ", fixed=TRUE)
### Now I break up the columb by white space and take the first and second objects...
Lasiodiplodiatheobromae$host_genus <- unlist(lapply(breakbywhitespace, function(x) x[1]))
Lasiodiplodiatheobromae$host_species <- unlist(lapply(breakbywhitespace, function(x) x[2]))
### removes : and replaces with blank space
Lasiodiplodiatheobromae$host_species <- as.character(gsub(":","",Lasiodiplodiatheobromae$host_species))
### adding colum with pathogen name
Lasiodiplodiatheobromae<- cbind(Pathogen = "Lasiodiplodia_theobromae", Lasiodiplodiatheobromae)
### Creating final dataset for fungal pathogen with only the relevant information
Lasiodiplodiatheobromae <- subset(Lasiodiplodiatheobromae, select = c(1, 3, 4))
### merging all fungal datasets into one
Fungalhost<- Reduce(function(x, y) merge(x, y, all=TRUE), list(Alternaria_alternata, Botrytiscinerea, Eutypalata, Lasiodiplodiatheobromae))
View(Fungalhost)
###Paratrichodorus_minor
Paratrichodorus_minor<- read.delim("~/Documents/Ph.D/Wine grape Disease/nematode/Paratrichodorus_minor.txt")
breakbywhitespace <- strsplit(as.character(Paratrichodorus_minor$PgenusPspec), " ", fixed=TRUE)
### Now I break up the columb by white space and take the first and second objects...
Paratrichodorus_minor$host_genus <- unlist(lapply(breakbywhitespace, function(x) x[1]))
Paratrichodorus_minor$host_species <- unlist(lapply(breakbywhitespace, function(x) x[2]))
### adding colum with pathogen name
Paratrichodorus_minor<- cbind(Pathogen = "Paratrichodorus_minor", Paratrichodorus_minor)
### Creating final dataset for fungal pathogen with only the relevant information
Paratrichodorus_minor <- subset(Paratrichodorus_minor, select = c(1, 4, 5))
###Tylenchorhynchus_clarus
Tylenchorhynchus_clarus<- read.delim("~/Documents/Ph.D/Wine grape Disease/nematode/Tylenchorhynchus_clarus.txt")
breakbywhitespace <- strsplit(as.character(Tylenchorhynchus_clarus$PgenusPspec), " ", fixed=TRUE)
### Now I break up the columb by white space and take the first and second objects...
Tylenchorhynchus_clarus$host_genus <- unlist(lapply(breakbywhitespace, function(x) x[1]))
Tylenchorhynchus_clarus$host_species <- unlist(lapply(breakbywhitespace, function(x) x[2]))
### adding colum with pathogen name
Tylenchorhynchus_clarus<- cbind(Pathogen = "Tylenchorhynchus_clarus", Tylenchorhynchus_clarus)
### Creating final dataset for fungal pathogen with only the relevant information
Tylenchorhynchus_clarus <- subset(Tylenchorhynchus_clarus, select = c(1, 4, 5))
###Xiphinema_americanum
Xiphinema_americanum<- read.delim("~/Documents/Ph.D/Wine grape Disease/nematode/Xiphinema_americanum.txt")
breakbywhitespace <- strsplit(as.character(Xiphinema_americanum$PgenusPspec), " ", fixed=TRUE)
### Now I break up the columb by white space and take the first and second objects...
Xiphinema_americanum$host_genus <- unlist(lapply(breakbywhitespace, function(x) x[1]))
Xiphinema_americanum$host_species <- unlist(lapply(breakbywhitespace, function(x) x[2]))
### adding colum with pathogen name
Xiphinema_americanum<- cbind(Pathogen = "Xiphinema_americanum", Xiphinema_americanum)
### Creating final dataset for fungal pathogen with only the relevant information
Xiphinema_americanum <- subset(Xiphinema_americanum, select = c(1, 4, 5))
###Mesocriconema_xenoplax
Mesocriconema_xenoplax<- read.delim("~/Documents/Ph.D/Wine grape Disease/nematode/Mesocriconema_xenoplax.txt")
breakbywhitespace <- strsplit(as.character(Mesocriconema_xenoplax$PgenusPspec), " ", fixed=TRUE)
### Now I break up the columb by white space and take the first and second objects...
Mesocriconema_xenoplax$host_genus <- unlist(lapply(breakbywhitespace, function(x) x[1]))
Mesocriconema_xenoplax$host_species <- unlist(lapply(breakbywhitespace, function(x) x[2]))
### adding colum with pathogen name
Mesocriconema_xenoplax<- cbind(Pathogen = "Mesocriconema_xenoplax", Mesocriconema_xenoplax)
### Creating final dataset for fungal pathogen with only the relevant information
Mesocriconema_xenoplax <- subset(Mesocriconema_xenoplax, select = c(1, 4, 5))
### merging all nematode datasets into one
nematodehost<- Reduce(function(x, y) merge(x, y, all=TRUE), list(Paratrichodorus_minor, Tylenchorhynchus_clarus, Xiphinema_americanum, Mesocriconema_xenoplax))
View(nematodehost)
### merging all datasets into one
host_spp<- Reduce(function(x, y) merge(x, y, all=TRUE), list(host_spp, Fungalhost, nematodehost))
View(host_spp)
str(host_spp)
### remove duplicates from data sets
hosty<- host_spp [!duplicated(host_spp[c(1,2,3)]),]
View(hosty)
### remove duplicates from data set
### 1101 rows deleted
host_spp<- host_spp [!duplicated(host_spp[c(1,2,3)]),]
#get a list of the pathogens
path<-unique(host_spp$Pathogen)
#creat an empty variable to strore final results
agg_hosts<-NULL
#start a loop to extract host species list for each pathogen
for (i in 1:length(path)){
#subset the data for pathogen[i]
my_hosts<-subset(host_spp, Pathogen == path[i])
#format host names nicely
host_names<-paste(my_hosts$host_genus,"_",my_hosts$host_species, sep="")
#creat a temporary variable to store agricultural hosts
agg_list<-NULL
#start a loop to run through recorded hosts and macth them to agricultural species
for (n in 1:length(host_names)){
#if statement extracts all agricultural species in that genus if a species name is not given
#(assumes pathohen infects entire genus!)
if (my_hosts$host_species[n] == "sp."){
host.to.add<-subset(agg_spp, genus == my_hosts$host_genus[n])[,"Species_name"]
} else {
#if a species name is given - see if it matches to a species in the aggricultural crop list
host.to.add<-agg_spp$Species_name[agg_spp$Species_name %in% host_names[n]]
}#end if
#store crops species list for pathoigen[i] (first checking whether at elast one crop species was returned)
if (length(host.to.add)>0){
agg_list<-c(agg_list, host.to.add)
}
}#end for n
#save output in agg_hosts with a column for the pathogen and a column for the aggricultural host species
agg_hosts<-rbind(agg_hosts,(cbind(rep(path[i], length(agg_list)), agg_list)))
}#end for i
View(agg_hosts)
unique(agg_hosts)
View(agg_hosts)
unique(host_spp)
str(host_spp)
str(unique(host_spp))
View(agg_hosts)
str(unique(agg_hosts))
?duplicated
?!
)
View(host_spp)
agg_list
str(agg_hosts)
### remove duplicates for output list
aggy<- agg_hosts[!duplicated(agg_hosts[c(1,2)]),]
View(agg_hosts)
### remove duplicates for output list
agg_hosts <- as.data.frame(agg_hosts)
aggy<- agg_hosts[!duplicated(agg_hosts[c(1,2)]),]
View(aggy)
agg_hosts<- agg_hosts[!duplicated(agg_hosts[c(1,2)]),]
library(ape)
library(phytools)
library(picante)
mytree <- read.tree(file = "~/Documents/Ph.D/Wine grape Disease/Milla_et_al_2018_Phylogoney/phylo_plant_fam.tre")
str(mytree)
plot(mytree, cex=0.7)
mytree2 <- read.tree(file = "~/Documents/Ph.D/Wine grape Disease/Milla_et_al_2018_Phylogoney/phylo_plant_gen.tre")
plot(mytree2, cex=0.7)
out2 <- table(agg_hosts)
str(mytree2)
pd(out2, mytree2, include.root=TRUE)
mytree3 <- read.tree(file = "~/Downloads/PhylogeneticResources/Vascular_Plants_rooted.dated.tre")
plot(mytree3)
str(mytree3)
mytree3$tip.label
pd(out2, mytree3, include.root=TRUE)
?pd
mytree <- cophenetic(mytree3)
mytree4 <- cophenetic(mytree3)
?mpd
View(mytree3)
?fastHeight
fastDist<-function(mytree3,Agrobacterium_vitis,Alternaria_alternata){
fastHeight(mytree3,Agrobacterium_vitis,Agrobacterium_vitis)+fastHeight(mytree3,Alternaria_alternata,Alternaria_alternata)-2*fastHeight(mytree3,Agrobacterium_vitis,Alternaria_alternata)
}
View(fastDist)
mpd(out2, fastDist, abundance.weighted = FALSE)
mpd(out2, fastDist(Agrobacterium_vitis), abundance.weighted = FALSE)
fastDist<-function(tree,sp1,sp2){
fastHeight(tree,sp1,sp1)+fastHeight(tree,sp2,sp2)-2*fastHeight(tree,sp1,sp2)
}
mpd(out2, fastDist(Agrobacterium_vitis, Alternaria_alternata), abundance.weighted = FALSE)
mpd(out2, fastDist, abundance.weighted = FALSE)
install.packages("phangorn")
library(phangorn)
library(ape)
library(phytools)
library(picante)
mydisttree <- dist.ml(mytree3)
str(mytree3)
mytree3 <- as.phyDat(mytree3)
?as.phyDat
mydisttree <- cophenetic(mytree3)
mydisttree <- cophenetic.phylo(mytree3)
mytips<-as.list(mytree3$tip.label)
dropme<-mytips[!mytips %in% agg_hosts]
ag.tree<-drop.tip(mytree3, dropme)
ag.tree<-drop.tip(mytree3$tip.label, dropme)
ag.tree<-drop.tip(mytree3$tip.label, dropme)
ag.tree<-drop.tip(mytree3, dropme)
dropme
ag.tree<-drop.tip(mytree3, dropme, trim.internal = TRUE)
ag.tree<-drop.tip(mytree3, dropme, trim.internal = FALSE)
warning()
warning()
mytips<-as.list(mytree3$tip.label)
dropme<-mytips[!mytips %in% agg_spp]
ag.tree<-drop.tip(mytree3, dropme)
is.na(dropme)
is.na(mytips)
unique(is.na(dropme))
unique(is.na(mytips))
ag.tree<-drop.tip(mytree3, dropme, na.omit(ag.tree))
is.na(ag.tree)
ag.tree<-drop.tip(mytree3, dropme, na.omit(ag.tree))
warnings()
ag.tree<-drop.tip(mytree3, dropme)
warnings()
mytips<-as.list(mytree3$tip.label)
dropme<-mytips[!mytips %in% agg_spp]
dropme<-mytips[!mytips %in% agg_spp]
dropme<-
fgnjfgj
dropme
mytips
dropme
mytips<-as.list(mytree3$tip.label)
dropme<-mytips[!mytips %in% agg_hosts$agg_list]
mytips
dropme
dropag.tree<-drop.tip(mytree3, dropme)
warnings()
dropag.tree<-drop.tip(mytree3, dropme, trim.internal = TRUE)
dropag.tree<-keep.tip(mytree3, dropme, trim.internal = TRUE)
dropag.tree<-keep.tip(mytree3, dropme)
mytips<-as.list(mytree3$tip.label)
dropme<-mytips[!mytips %in% agg_spp$Species_name]
dropag.tree<-keep.tip(mytree3, dropme)
warnings()
?match_dataphy
??match.phylo.data
match.phylo.data(mytree3$tip.label,agg_spp$Species_name)
match.phylo.data(mytree3,agg_spp$Species_name)
bro<- match.phylo.data(mytree3,agg_spp$Species_name)
View(bro)
dropme<-mytips[!mytips %in% agg_spp$Species_name]
mytips<-as.list(mytree3$tip.label)
View(mytips)
dropag.tree<-keep.tip(mytree3, dropme)
dropag.tree<-drop.tip(mytree3, dropme)
dropag.tree<-drop.tip(mytree3$tip.label, dropme)
str(mytree3)
View(agg_spp)
View(mytips)
View(dropme)
str(mytips)
str(dropme)
[!mytips %in% agg_spp$Species_name]
mytips[!mytips %in% agg_spp$Species_name]
mytips[mytips[!mytips %in% agg_spp$Species_name]] <- NULL
mytips[!mytips %in% agg_spp$Species_name] <- NULL
mytips
str(mytips)
dropag.tree<-drop.tip(mytree3, mytips)
dropag.tree<-drop.tip(mytree3, mytips)
mytips<-as.list(mytree3$tip.label)
dropme<-mytips[!mytips %in% agg_spp$Species_name]
dropag.tree<-drop.tip(mytree3, dropme)
dropme
mytips
install.packages(rstan)
install.packages("rstan")
install.packages("rstan")
install.packages("rstanarm")
#sentivity analysis based on type of pathogen
setwd("~/Documents/Ph.D/Wine_grape_Disease")
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
#loading in datasets
mpd_all_sp_in_genus <- read_csv("mpd_all_sp_in_genus.csv")
#sentivity analysis based on type of pathogen
setwd("~/Documents/Ph.D/Wine_grape_Disease")
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
library(tidyverse)
library(dbplyr)
library(tidyr)
library(reshape2)
library(data.table)
library(tibble)
library(dplyr)
#loading in datasets
mpd_all_sp_in_genus <- read_csv("mpd_all_sp_in_genus.csv")
mpd_single_sp_in_genus <- read_csv("mpd.single.sp.in.genus.csv")
focaldistance_onespecies <- read_csv("Focaldistanceonespecies.csv")
focaldistance_enitregenus <- read_csv("Focaldistanceentiregenus.csv")
View(focaldistance_enitregenus)
vars <- c("X1", "mpd.obs.z", "Type", "category", "bodysize") #creates a variable with only the necessary column names
N <- list(1,2,3) #creates a list
COMB <- sapply(N, function(m) combn(x=vars[3:5], m)) #creates a vector with diferent combinations of explanatory variables
COMB2 <- list() #creates empty list
k=0
for (i in seq(COMB)){ ###creates a vector with all the different combinations of variables in a structure ready to be analyzed
tmp <- COMB[[i]]
for (j in seq(ncol(tmp))){
k <- k + 1
COMB2[[k]] <- formula(paste("mpd.obs.z", "~", paste(tmp[,j], collapse = " + ")))
}
}
View(COMB)
View(COMB2)
drake <- list(mpd_all_sp_in_genus, mpd_single_sp_in_genus) #creates list of mpd data output
View(drake)
res <- vector(mode="list", length(COMB2)) #creates empty vector
res1 <- vector(mode="list", length(COMB2)) #creates empty vector
for (i in seq(COMB2)){ #Creates aov outputs for all the different combinations of the variables
res[[i]] <- summary(aov(COMB2[[i]], data=drake[[1]]))
res1[[i]] <- summary(aov(COMB2[[i]], data=drake[[2]]))
}
View(res)
#sentivity analysis based on type of pathogen
setwd("~/Documents/Ph.D/Wine_grape_Disease")
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
library(tidyverse)
library(dbplyr)
library(tidyr)
library(reshape2)
library(data.table)
library(tibble)
library(dplyr)
library(rstanarm)
#loading in datasets
mpd_all_sp_in_genus <- read_csv("mpd_all_sp_in_genus.csv")
mpd_single_sp_in_genus <- read_csv("mpd.single.sp.in.genus.csv")
focaldistance_onespecies <- read_csv("Focaldistanceonespecies.csv")
focaldistance_enitregenus <- read_csv("Focaldistanceentiregenus.csv")
View(focaldistance_enitregenus)
View(mpd_all_sp_in_genus)
simple <- stan_glm(mpd.obs.z~ Type + category + bodysize, data = mpd_all_sp_in_genus, family = gaussian(), prior = cauchy(), prior_intercept = cauchy(), chains= CHAINS, cores= CORES, seed= SEED)
simple <- stan_glm(mpd.obs.z~ Type + category + bodysize, data = mpd_all_sp_in_genus, family = gaussian(), prior = cauchy(), prior_intercept = cauchy())
install.packages("loo")
library(loo)
(loo_post <- loo(post))
simple
loo_post <- loo(post)
loo()
post <- stan_lm(mpd.obs.z~ Type + category + bodysize, data = mpd_all_sp_in_genus,
prior = R2(location = 0.2))
loo_post <- loo(post)
compare_models(loo_post, loo(simple))
compare_models(loo_post, loo(simple), k_threshol= 0.7)
loo_post <- loo(post, k_threshold = 0.7)
compare_models(loo_post, loo(simple, k_threshold = 0.7))
plot(loo_post, label_points = TRUE)
?loo
loo_simple <- loo(simple, k_threshold = 0.7)
plot(loo_simple, label_points = TRUE)
loo_simple <- loo(simple, k_threshold = 0.7)
loo_post <- loo(post, k_threshold = 0.7)
loo_simple <- loo(simple, k_threshold = 0.9)
plot(loo_post, label_points = TRUE)
plot(loo_simple, label_points = TRUE)
kfold(loo_simple)
kfold(simple)
kfold(post)
?elpd_kfold
?kfold
compare_models(kfold(simple), kfold(post))
#sentivity analysis based on type of pathogen
setwd("~/Documents/GitHub/Wine-Grape-Disease/analysis/output/")
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
library(tidyverse)
library(dbplyr)
library(tidyr)
library(reshape2)
library(data.table)
library(tibble)
library(dplyr)
mpd_all_sp_in_genus <- read_csv("mpd_all_sp_in_genus.csv")
