#save output in agg_hosts with a column for the pathogen and a column for the aggricultural host species
agg_hosts<-rbind(agg_hosts,(cbind(rep(path[i], length(agg_list)), agg_list)))
}#end for i
#Remove duplicates
path.data<-as.data.frame(agg_hosts)[duplicated(as.data.frame(agg_hosts))==F,]
path.data.abund<-data.frame(path.data[,1], rep(1, length(path.data[,1])), path.data[,2],stringsAsFactors=FALSE)
path.matrix<-sample2matrix(path.data.abund)
#this trims the data to just taxa in the tree and the community matrix
phylo.comm.data<-match.phylo.comm(tree, path.matrix)
my.paths<-row.names(phylo.comm.data$comm)
FPD<-NULL
SES.FPD<-NULL
for (j in 1:length(my.paths)){
my.hosts<-colnames(phylo.comm.data$comm)[phylo.comm.data$comm[j,] ==1]
if(length(my.hosts)<2){
FPD[j]<-NA
SES.FPD[j]<-NA
}#end if
if (length(my.hosts)>1){
temp.phy<-drop.tip(tree, tree$tip.label[!tree$tip.label %in% my.hosts])
temp.cophen<-cophenetic(temp.phy)
tmp.cophen<-temp.cophen[colnames(temp.cophen)=="Vitis_vinifera"]
FPD[j]<-sum(tmp.cophen)/(length(tmp.cophen)-1)
rnd.FPD<-NULL
for (x in 1:999){
sp.list<-tree$tip.label[!tree$tip.label == "Vitis_vinifera"]
rnd.sp<-c("Vitis_vinifera",sample(sp.list, (length(my.hosts)-1)))
rnd.phy<-drop.tip(tree, tree$tip.label[!tree$tip.label %in% rnd.sp])
rand.cophen<-cophenetic(rnd.phy)
rnd.cophen<-rand.cophen[colnames(rand.cophen)=="Vitis_vinifera"]
rnd.FPD[x]<-sum(rnd.cophen)/(length(rnd.cophen)-1)}#end x
SES.FPD[j]<-(FPD[j]-mean(rnd.FPD))/sd(rnd.FPD)
}#end if
}#end j
FPD.results<-data.frame(my.paths, FPD, SES.FPD)
View(FPD.results)
write.csv(FPD.results, "Focaldistanceentiregenus.csv")
write.csv(FPD.results2, "Focaldistanceonespecies.csv")
goodk<- goodness(example_NMDS)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
setwd("~/Documents/Ph.D/LI-COR Data (Manning Park)")
library(vegan)
library(tidyverse)
library(dbplyr)
library(tidyr)
library(reshape2)
LiCordatafinal <- read_csv("LiCordatafinal.csv")
#fixeserrors in species' names
LiCordatafinal$Species <- gsub(x= LiCordatafinal$Species, pattern = "lONSOF", replacement = "LONSOF")
LiCordatafinal$Species<- gsub(x= LiCordatafinal$Species, pattern = "TSHUET", replacement = "TSUHET")
LiCordatafinal$specieslatbi<- gsub(x= LiCordatafinal$specieslatbi, pattern = "lONSOF", replacement = "LONSOF")
LiCordatafinal$specieslatbi<- gsub(x= LiCordatafinal$specieslatbi, pattern = "TSHUET", replacement = "TSUHET")
#subsetting dataset for adult trees only!
LiCordata_adult <- LiCordatafinal[LiCordatafinal$seedlingoradult == 'a',]
LiCordata_adult <- na.omit(LiCordata_adult)
LiCordata_adult <- LiCordata_adult[,c(1:2,418:424,448,451)]
LiCordata_adult[, c(3:9)] <- sapply(LiCordata_adult[, c(3:9)], as.numeric)
rownames(LiCordata_adult) <- make.names(LiCordata_adult$Species, unique = TRUE)
community_matrix <- (sapply(LiCordata_adult[3:9], as.numeric))
community_matrix<- cbind(LiCordata_adult[1],community_matrix )
k<- dcast(LiCordata_adult, row.names(LiCordata_adult) ~ LiCordata_adult$Site, value.var = 'PFD-B')
View(k)
k <- `row.names<-`(k, k$`row.names(LiCordata_adult)`)
k <- k[-1]
k1 <- k[,c(1)]
k1 <- select(k, 'CF1')
k1 <- na.omit(k1)
community_matrix <- as.matrix(k1)
example_NMDS=metaMDS(community_matrix, k=2, wascores = TRUE)
goodk<- goodness(example_NMDS)
goodk
plot(example_NMDS,display="sites",main="2D Goodness of Fit",type="t")
points(example_NMDS,cex=2*gof2/mean(gof2))
plot(example_NMDS,display="sites",main="2D Goodness of Fit",type="t")
points(example_NMDS,cex=2*goodk/mean(goodk))
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
setwd("~/Documents/Ph.D/LI-COR Data (Manning Park)")
library(vegan)
library(tidyverse)
library(dbplyr)
library(tidyr)
library(reshape2)
library(data.table)
library(tibble)
library(dplyr)
LiCordatafinal <- read_csv("LiCordatafinal.csv")
#fixeserrors in species' names
LiCordatafinal$Species <- gsub(x= LiCordatafinal$Species, pattern = "lONSOF", replacement = "LONSOF")
LiCordatafinal$Species<- gsub(x= LiCordatafinal$Species, pattern = "TSHUET", replacement = "TSUHET")
LiCordatafinal$specieslatbi<- gsub(x= LiCordatafinal$specieslatbi, pattern = "lONSOF", replacement = "LONSOF")
LiCordatafinal$specieslatbi<- gsub(x= LiCordatafinal$specieslatbi, pattern = "TSHUET", replacement = "TSUHET")
LiCordata_adult <- LiCordatafinal[LiCordatafinal$seedlingoradult == 'a',]
LiCordata_adult1 <- LiCordatafinal[LiCordatafinal$Species == 'AMBIENT',]
LiCordata_adult <- na.omit(LiCordata_adult)
LiCordata_adult <- LiCordata_adult[,c(1:2,418:424,448,451)]
LiCordata_adult[, c(3:9)] <- sapply(LiCordata_adult[, c(3:9)], as.numeric)
LiCordata_adult1 <- LiCordata_adult1[,c(1:2,419:423,448,451)]
LiCordata_adult1[, c(3:7)] <- sapply(LiCordata_adult1[, c(3:7)], as.numeric)
#makes rowsname species names
rownames(LiCordata_adult) <- make.names(LiCordata_adult$Species, unique = TRUE)
#created dataset for one site and all PFD readings
k <- setDT(LiCordata_adult, row.names(LiCordata_adult))
k <- dcast(k, k$BETPAP01 ~ k$Site,
value.var = c("PFD-B", "PFD-FR", "PFD-G", "PFD-R", "PFD-UV"))
l <- LiCordata_adult1
l2<- l %>% group_by(l$Site) %>% summarise_all(funs(mean))
l2$Species <- rep("AMBIENT", 6)
l2 <- l2[,c(-3, -10)]
l2 <- setDT(l2, row.names(l2$Species))
l2 <- l2[,-1]
l2 <- dcast(l2, l2$Species ~ l2$`l$Site`,
value.var = c("PFD-B", "PFD-FR", "PFD-G", "PFD-R", "PFD-UV"))
#creates rownames which are species codes
str(k)
k <- as.data.frame(k)
rownames(k) <- make.names(k$k)
k <- k[,-1]
l2 <- as.data.frame(l2)
path <- unique(LiCordata_adult1$Site)
k1 <- select(k, contains(path[1]))
k1 <- na.omit(k1) #omits NAs
l3 <- select(l2, contains(path[1]))
View(l3)
View(k1)
path2 <- unique(names(k1))
k2 <- (matrix(NA, nrow= nrow(k1), ncol = ncol(k1)))
colnames(k2) <- colnames(k1)
row.names(k2) <- rownames(k1)
for (n in 1:length(path2)){
k2[,n]<- as.matrix(k1[,n] - l3[,n])
}
View(k2)
rankindex(scale(k2), varespec, c("euc","man","bray","jac","kul"))
rankindex(scale(k2), k2, c("euc","man","bray","jac","kul"))
dis <- vegdist(decostand(k2, "norm"), "euclid")
dis
community_matrix <- as.matrix(k2) #creates matrix
View(community_matrix)
??metaMDS
example_NMDS=metaMDS(community_matrix, distance = "euclidean", k=3) #runs NMDS
View(example_NMDS)
stressplot(example_NMDS)
plot(example_NMDS)
plot(example_NMDS, main="Species Ordination", type="t", display="species")
plot(example_NMDS)
orditorp(example_NMDS,display="sites",cex= 0.5,air= 0.3)#labels points as best as we can
k1 <- select(k, contains(path[3]))
k1 <- na.omit(k1) #omits NAs
l3 <- select(l2, contains(path[3]))
path2 <- unique(names(k1))
k2 <- (matrix(NA, nrow= nrow(k1), ncol = ncol(k1)))
colnames(k2) <- colnames(k1)
row.names(k2) <- rownames(k1)
for (n in 1:length(path2)){
k2[,n]<- as.matrix(k1[,n] - l3[,n])
}
community_matrix <- as.matrix(k2) #creates matrix
View(community_matrix)
example_NMDS=metaMDS(community_matrix, distance = "euclidean", k=3) #runs NMDS
stressplot(example_NMDS)
plot(example_NMDS)
plot(example_NMDS, main="Species Ordination", type="t", display="species")
plot(example_NMDS)
orditorp(example_NMDS,display="sites",cex= 0.5,air= 0.3)#labels points as best as we can
LiCordatafinal <- read_csv("LiCordatafinal.csv")
#fixeserrors in species' names
LiCordatafinal$Species <- gsub(x= LiCordatafinal$Species, pattern = "lONSOF", replacement = "LONSOF")
LiCordatafinal$Species<- gsub(x= LiCordatafinal$Species, pattern = "TSHUET", replacement = "TSUHET")
LiCordatafinal$specieslatbi<- gsub(x= LiCordatafinal$specieslatbi, pattern = "lONSOF", replacement = "LONSOF")
LiCordatafinal$specieslatbi<- gsub(x= LiCordatafinal$specieslatbi, pattern = "TSHUET", replacement = "TSUHET")
LiCordata_adult <- LiCordatafinal[LiCordatafinal$seedlingoradult == 'a',]
LiCordata_adult1 <- LiCordatafinal[LiCordatafinal$Species == 'AMBIENT',]
LiCordata_adult <- na.omit(LiCordata_adult)
LiCordata_adult <- LiCordata_adult[,c(1:2,418:424,448,451)]
LiCordata_adult[, c(3:9)] <- sapply(LiCordata_adult[, c(3:9)], as.numeric)
LiCordata_adult1 <- LiCordata_adult1[,c(1:2,419:423,448,451)]
LiCordata_adult1[, c(3:7)] <- sapply(LiCordata_adult1[, c(3:7)], as.numeric)
#makes rowsname species names
rownames(LiCordata_adult) <- make.names(LiCordata_adult$Species, unique = TRUE)
#created dataset for one site and all PFD readings
k <- setDT(LiCordata_adult, row.names(LiCordata_adult))
k <- dcast(k, k$BETPAP01 ~ k$Site,
value.var = c("PFD-B", "PFD-FR", "PFD-G", "PFD-R", "PFD-UV"))
l <- LiCordata_adult1
l2<- l %>% group_by(l$Site) %>% summarise_all(funs(mean))
l2$Species <- rep("AMBIENT", 6)
l2 <- l2[,c(-3, -10)]
l2 <- setDT(l2, row.names(l2$Species))
l2 <- l2[,-1]
l2 <- dcast(l2, l2$Species ~ l2$`l$Site`,
value.var = c("PFD-B", "PFD-FR", "PFD-G", "PFD-R", "PFD-UV"))
#creates rownames which are species codes
str(k)
k <- as.data.frame(k)
rownames(k) <- make.names(k$k)
k <- k[,-1]
l2 <- as.data.frame(l2)
path <- unique(LiCordata_adult1$Site)
for (i in 1:length(path)){
k1 <- select(k, contains(path[i])) #selects variables that contain the sites
k1 <- na.omit(k1) #omits NAs
l3 <- select(l2, contains(path[i])) #selects variables that contain the sites
path2 <- unique(names(k1))
k2 <- (matrix(NA, nrow= nrow(k1), ncol = ncol(k1)))
colnames(k2) <- colnames(k1)
row.names(k2) <- rownames(k1)
for (n in 1:length(path2)){
k2[,n]<- as.matrix(k1[,n] - l3[,n])
}
community_matrix <- as.matrix(k2) #creates matrix
example_NMDS=metaMDS(community_matrix, distance = "euclidean", k=3) #runs NMDS
plotname <- paste("NMDS_ambspie",path[i],".pdf", sep="") #plotseach site seperately
pdf(file= plotname)
stressplot(example_NMDS)
plot(example_NMDS)
plot(example_NMDS, main="Species Ordination", type="t", display="species")
plot(example_NMDS)
orditorp(example_NMDS,display="sites",cex= 0.5,air= 0.3)#labels points as best as we can
dev.off()
}
path <- unique(LiCordata_adult1$Site)
for (i in 1:length(path)){
k1 <- select(k, contains(path[i])) #selects variables that contain the sites
k1 <- na.omit(k1) #omits NAs
l3 <- select(l2, contains(path[i])) #selects variables that contain the sites
path2 <- unique(names(k1))
k2 <- (matrix(NA, nrow= nrow(k1), ncol = ncol(k1)))
colnames(k2) <- colnames(k1)
row.names(k2) <- rownames(k1)
for (n in 1:length(path2)){
k2[,n]<- as.matrix(k1[,n] - l3[,n])
}
community_matrix <- as.matrix(k2) #creates matrix
example_NMDS=metaMDS(community_matrix, distance = "euclidean", k=3) #runs NMDS
plotname <- paste("NMDS_ambspie",path[i],".pdf", sep="") #plotseach site seperately
pdf(file= plotname)
stressplot(example_NMDS)
plot(example_NMDS)
plot(example_NMDS, main="Species Ordination", type="t", display="species")
plot(example_NMDS)
orditorp(example_NMDS,display="sites",cex= 0.5,air= 0.3)#labels points as best as we can
dev.off()
}
path <- unique(LiCordata_adult1$Site)
for (i in 2){
k1 <- select(k, contains(path[i])) #selects variables that contain the sites
k1 <- na.omit(k1) #omits NAs
l3 <- select(l2, contains(path[i])) #selects variables that contain the sites
path2 <- unique(names(k1))
k2 <- (matrix(NA, nrow= nrow(k1), ncol = ncol(k1)))
colnames(k2) <- colnames(k1)
row.names(k2) <- rownames(k1)
for (n in 1:length(path2)){
k2[,n]<- as.matrix(k1[,n] - l3[,n])
}
community_matrix <- as.matrix(k2) #creates matrix
example_NMDS=metaMDS(community_matrix, distance = "euclidean", k=3) #runs NMDS
plotname <- paste("NMDS_ambspie",path[i],".pdf", sep="") #plotseach site seperately
pdf(file= plotname)
stressplot(example_NMDS)
plot(example_NMDS)
plot(example_NMDS, main="Species Ordination", type="t", display="species")
plot(example_NMDS)
orditorp(example_NMDS,display="sites",cex= 0.5,air= 0.3)#labels points as best as we can
dev.off()
}
#creates rownames which are species codes
str(k)
k <- as.data.frame(k)
rownames(k) <- make.names(k$k)
k <- k[,-1]
l2 <- as.data.frame(l2)
path <- unique(LiCordata_adult1$Site)
for (i in 1){
k1 <- select(k, contains(path[i])) #selects variables that contain the sites
k1 <- na.omit(k1) #omits NAs
l3 <- select(l2, contains(path[i])) #selects variables that contain the sites
path2 <- unique(names(k1))
k2 <- (matrix(NA, nrow= nrow(k1), ncol = ncol(k1)))
colnames(k2) <- colnames(k1)
row.names(k2) <- rownames(k1)
for (n in 1:length(path2)){
k2[,n]<- as.matrix(k1[,n] - l3[,n])
}
community_matrix <- as.matrix(k2) #creates matrix
example_NMDS=metaMDS(community_matrix, distance = "euclidean", k=3) #runs NMDS
plotname <- paste("NMDS_ambspie",path[i],".pdf", sep="") #plotseach site seperately
pdf(file= plotname)
stressplot(example_NMDS)
plot(example_NMDS)
plot(example_NMDS, main="Species Ordination", type="t", display="species")
plot(example_NMDS)
orditorp(example_NMDS,display="sites",cex= 0.5,air= 0.3)#labels points as best as we can
dev.off()
}
View(k2)
View(l3)
for (i in 1){
k1 <- select(k, contains(path[i])) #selects variables that contain the sites
k1 <- na.omit(k1) #omits NAs
l3 <- select(l2, contains(path[i])) #selects variables that contain the sites
path2 <- unique(names(k1))
k2 <- (matrix(NA, nrow= nrow(k1), ncol = ncol(k1)))
colnames(k2) <- colnames(k1)
row.names(k2) <- rownames(k1)
for (n in 1:length(path2)){
k2[,n]<- as.matrix(k1[,n] - l3[,n])
}
community_matrix <- as.matrix(k2) #creates matrix
example_NMDS=metaMDS(community_matrix, distance = "euclidean", k=3) #runs NMDS
plotname <- paste("NMDS_ambspie",path[i],".pdf") #plotseach site seperately
pdf(file= plotname)
stressplot(example_NMDS)
plot(example_NMDS)
plot(example_NMDS, main="Species Ordination", type="t", display="species")
plot(example_NMDS)
orditorp(example_NMDS,display="sites",cex= 0.5,air= 0.3)#labels points as best as we can
dev.off()
}
k1 <- select(k, contains(path[1]))
k1 <- na.omit(k1)
l3 <- select(l2, contains(path[1]))
path2 <- unique(names(k1)
)
k2 <- (matrix(NA, nrow= nrow(k1), ncol = ncol(k1)))
colnames(k2) <- colnames(k1)
row.names(k2) <- rownames(k1)
for (n in 1:length(path2)){
k2[,n]<- as.matrix(k1[,n] - l3[,n])
}
View(k2)
community_matrix <- as.matrix(k2) #creates matrix
example_NMDS=metaMDS(community_matrix, distance = "euclidean", k=3) #runs NMDS
plotname <- paste("NMDS_ambspie",path[i],".pdf") #plotseach site seperately
pdf(file= plotname)
stressplot(example_NMDS)
plot(example_NMDS)
plot(example_NMDS, main="Species Ordination", type="t", display="species")
plot(example_NMDS)
orditorp(example_NMDS,display="sites",cex= 0.5,air= 0.3)#labels points as best as we can
community_matrix <- as.matrix(k2) #creates matrix
example_NMDS=metaMDS(community_matrix, distance = "euclidean", k=3) #runs NMDS
plotname <- paste("NMDS_ambspie",path[i],".pdf") #plotseach site seperately
pdf(file= plotname)
stressplot(example_NMDS)
plot(example_NMDS)
orditorp(example_NMDS,display="sites",cex= 0.5,air= 0.3)#labels points as best as we can
dev.off()
community_matrix <- as.matrix(k2) #creates matrix
example_NMDS=metaMDS(community_matrix, distance = "euclidean", k=3) #runs NMDS
plotname <- paste("NMDS_ambspie",path[i],".pdf") #plotseach site seperately
pdf(file= plotname)
stressplot(example_NMDS)
plot(example_NMDS)
orditorp(example_NMDS,display="sites",cex= 0.5,air= 0.3)#labels points as best as we can
dev.off()
community_matrix <- as.matrix(k2) #creates matrix
example_NMDS=metaMDS(community_matrix, distance = "euclidean", k=3) #runs NMDS
plotname <- paste("NMDS_ambspie",path[i],".pdf", sep = "") #plotseach site seperately
pdf(file= plotname)
stressplot(example_NMDS)
plot(example_NMDS)
orditorp(example_NMDS,display="sites",cex= 0.5,air= 0.3)#labels points as best as we can
dev.off()
stressplot(example_NMDS)
plot(example_NMDS)
orditorp(example_NMDS,display="sites",cex= 0.5,air= 0.3)#labels points as best as we can
orditorp(example_NMDS)
orditorp(example_NMDS, display= "sites")
orditorp(example_NMDS, display= "species")
community_matrix <- as.matrix(k2) #creates matrix
View(community_matrix)
example_NMDS=metaMDS(community_matrix, distance = "euclidean", k=3) #runs NMDS
View(example_NMDS)
plotname <- paste("NMDS_ambspie",path[i],".pdf", sep = "") #plotseach site seperately
stressplot(example_NMDS)
orditorp(example_NMDS, display= "species")
orditorp(example_NMDS,display="sites",cex= 0.5,air= 0.3)#labels points as best as we can
colnames(community_matrix)
plot(example_NMDS, main="Species Ordination", type="t", display="species")
View(example_NMDS)
example_NMDS$species
path <- unique(LiCordata_adult1$Site)
for (i in 1:length(path)){
k1 <- select(k, contains(path[i])) #selects variables that contain the sites
k1 <- na.omit(k1) #omits NAs
l3 <- select(l2, contains(path[i])) #selects variables that contain the sites
path2 <- unique(names(k1))
k2 <- (matrix(NA, nrow= nrow(k1), ncol = ncol(k1)))
colnames(k2) <- colnames(k1)
row.names(k2) <- rownames(k1)
for (n in 1:length(path2)){
k2[,n]<- as.matrix(k1[,n] - l3[,n])
}
community_matrix <- as.matrix(k2) #creates matrix
example_NMDS=metaMDS(community_matrix, distance = "euclidean", k=3) #runs NMDS
plotname <- paste("NMDS_ambspie",path[i],".pdf", sep = ) #plotseach site seperately
pdf(file= plotname)
stressplot(example_NMDS)
plot(example_NMDS)
orditorp(example_NMDS,display="sites",cex= 0.5,air= 0.3)#labels points as best as we can
dev.off()
}
dist <- vegdist(k2,  method = "gower")
NMDS.scree(dist)
NMDS.scree <- function(x) { #where x is the name of the data frame variable
plot(rep(1, 10), replicate(10, metaMDS(x, autotransform = F, k = 1)$stress), xlim = c(1, 10),ylim = c(0, 0.30), xlab = "# of Dimensions", ylab = "Stress", main = "NMDS stress plot")
for (i in 1:10) {
points(rep(i + 1,10),replicate(10, metaMDS(x, autotransform = F, k = i + 1)$stress))
}
}
NMDS.scree(dist)
NMDS3 <- metaMDS(k2, k = 2, trymax = 100, trace = F, autotransform = FALSE, distance="gower")
plot(NMDS3)
plot(NMDS3, display = "sites", type = "n")
points(NMDS3, display = "sites", col = "red", cex = 1.25)
text(NMDS3, display ="species")
NMDS3 <- metaMDS(k2, k = 2, trymax = 100, trace = F, autotransform = FALSE, distance="euclidean")
plot(NMDS3)
plot(NMDS3, display = "sites", type = "n")
points(NMDS3, display = "sites", col = "red", cex = 1.25)
text(NMDS3, display ="species")
text(NMDS3, display ="species")
NMDS.scree(dist)
dist <- vegdist(k2,  method = "gower")
library(MASS)
d <- isoMDS(dist )
View(d)
plot(d)
dist <- vegdist(k2,  method = "gower", trace = FALSE)
d <- isoMDS(dist )
rankindex(scale(LiCordatafinal), k2, c("euc","man","bray","jac","kul"))
rankindex(scale(k2), k2, c("euc","man","bray","jac","kul"))
library(vegan3d)
install.packages("vegan3d")
library(vegan3d)
library(vegan3d)
install.packages("vegan3d")
library(vegan3d)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
setwd("~/Documents/Ph.D/Wine_grape_Disease")
library(ape)
library(picante)
library(tidyverse)
library(dbplyr)
library(data.table)
library(readr)
library(reshape2)
source("match_taxa.R")
zanne.tree<-read.tree(file = "~/Documents/GitHub/Wine-Grape-Disease/Zanne_et_al_2013/Vascular_Plants_rooted.dated.tre")
agg.dat<-read.csv("agricultural_species.csv")
mytips<-zanne.tree$tip.label
dropme<-mytips[!mytips %in% agg.dat$Species_name]
ag.tree<-drop.tip(zanne.tree, dropme)
tree<-ag.tree
#removes all irregular symbols from host_species
host_spp$host_species<- str_replace_all(host_spp$host_species, "[[:punct:]]", "")
#removes the "x" if it is the first character in the host_species column
host_spp$host_species<- gsub("^(×)", "", host_spp$host_species)
#removes "�" from host_species column
host_spp$host_species<- gsub("(�)$" ,"", host_spp$host_species)
#replaces all "sp" with "sp." in the host species column
host_spp$host_species[host_spp$host_species == "sp"] <- "sp."
#makes all capitals into lower case
host_spp$host_species<- tolower(host_spp$host_species)
#combines two columns and seperates them by a _
host_spp$Host = paste(host_spp$host_genus, host_spp$host_species, sep="_")
#adds "vitis_vinifera" to each unique pathogen
for (i in 1:49) {
host_spp <- add_row(host_spp,
Pathogen = unique(host_spp$Pathogen)[i],
host_genus = "Vitis",
host_species = "vinifera",
Host = "Vitis_vinifera")
}
#Read in dataframes
pathogens<-host_spp
agg_spp<-read.csv("agricultural_species.csv", stringsAsFactors=F)
#sentivity analysis based on type of pathogen
setwd("~/Documents/Ph.D/Wine_grape_Disease")
mpd_all_sp_in_genus <- read_csv("mpd_all_sp_in_genus.csv")
mpd_single_sp_in_genus <- read_csv("mpd.single.sp.in.genus.csv")
View(mpd_single_sp_in_genus)
View(mpd_all_sp_in_genus)
View(mpd_single_sp_in_genus)
mpd_all_sp_in_genus[c(1,7,10)]
testmpdall <- mpd_all_sp_in_genus[c(1,7,9)]
testmpdall <- na.omit(testmpdall)
fit <- aov(mpd.obs.z~ Type, data= testmpdall)
#sentivity analysis based on type of pathogen
setwd("~/Documents/GitHub/Wine-Grape-Disease/data/")
mpd_all_sp_in_genus <- read_csv("mpd_all_sp_in_genus.csv")
mpd_single_sp_in_genus <- read_csv("mpd.single.sp.in.genus.csv")
View(mpd_all_sp_in_genus)
testmpdall <- mpd_all_sp_in_genus[c(1,7,10)]
View(testmpdall)
testmpdall <- na.omit(testmpdall)
fit <- aov(mpd.obs.z~ Type, data= testmpdall)
summary(fit)
testmpsin<- mpd_single_sp_in_genus[c(1,7,10)]
testmpdall <- mpd_all_sp_in_genus[c(1,7,10)]
View(testmpdall)
testmpdall <- na.omit(testmpdall)
fit <- aov(mpd.obs.z~ Type, data= testmpdall)
summary(fit)
testmpsin<- mpd_single_sp_in_genus[c(1,7,10)]
testmpsin <- na.omit(testmpsin)
fit2 <- aov(mpd.obs.z~ Type, data= testmpsin)
summary(fit2)
